{"ast":null,"code":"var _jsxFileName = \"c:\\\\xampp\\\\htdocs\\\\test-site\\\\components\\\\ImageContent.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect, useContext } from 'react'; // import { useStateValue } from '../components/StateProvider'\n\nimport PropTypes from 'prop-types';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nconst ImageContent = data => {\n  const {\n    0: width,\n    1: setWidth\n  } = useState(0);\n  const {\n    0: cols,\n    1: setCols\n  } = useState(0);\n  const {\n    0: currentWidth,\n    1: setCurrentWidth\n  } = useState(ref); // const [{ size }, dispatch] = useStateValue()\n\n  const ref = useRef(null);\n  console.log(ref);\n  useEffect(() => {\n    const currentWidth = ref.current ? ref.current.offsetWidth : 0;\n    setWidth(currentWidth);\n\n    if (currentWidth > 640) {\n      setCols(2); // dispatch({\n      // \ttype: 'getCol',\n      // \tcolSize: { newSize: cols }\n      // })\n    } else {\n      setCols(1); // dispatch({\n      // \ttype: 'getCol',\n      // \tcolSize: { newSize: cols }\n      // })\n    }\n  }, [ref.current]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, width), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, cols), __jsx(\"img\", {\n    ref: ref,\n    src: `${data.artistImage}` !== `null` ? `${data.artistImage}` : 'https://image-placeholder.com/images/actual-size/100x75.png',\n    alt: data.artistName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\n\nImageContent.propTypes = {\n  data: PropTypes.any // eslint-disable-line\n\n};\nexport default ImageContent;","map":{"version":3,"sources":["c:/xampp/htdocs/test-site/components/ImageContent.js"],"names":["React","useState","useRef","useEffect","useContext","PropTypes","GridList","GridListTile","ImageContent","data","width","setWidth","cols","setCols","currentWidth","setCurrentWidth","ref","console","log","current","offsetWidth","artistImage","artistName","propTypes","any"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,UAA7C,QAA+D,OAA/D,C,CACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAC9B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACW,IAAD;AAAA,OAAOC;AAAP,MAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAA,OAACa,YAAD;AAAA,OAAeC;AAAf,MAAkCd,QAAQ,CAACe,GAAD,CAAhD,CAH8B,CAI9B;;AACA,QAAMA,GAAG,GAAGd,MAAM,CAAC,IAAD,CAAlB;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAb,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMW,YAAY,GAAGE,GAAG,CAACG,OAAJ,GAAcH,GAAG,CAACG,OAAJ,CAAYC,WAA1B,GAAwC,CAA7D;AACAT,IAAAA,QAAQ,CAACG,YAAD,CAAR;;AACA,QAAIA,YAAY,GAAG,GAAnB,EAAwB;AACvBD,MAAAA,OAAO,CAAC,CAAD,CAAP,CADuB,CAEvB;AACA;AACA;AACA;AACA,KAND,MAMO;AACNA,MAAAA,OAAO,CAAC,CAAD,CAAP,CADM,CAEN;AACA;AACA;AACA;AACA;AAED,GAjBQ,EAiBN,CAACG,GAAG,CAACG,OAAL,CAjBM,CAAT;AAqBA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOT,KAAP,CADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOE,IAAP,CAFD,EAGC;AACC,IAAA,GAAG,EAAEI,GADN;AAEC,IAAA,GAAG,EAAG,GAAEP,IAAI,CAACY,WAAY,EAApB,KAA2B,MAA3B,GAAoC,GAAEZ,IAAI,CAACY,WAAY,EAAvD,GAA2D,6DAFjE;AAGC,IAAA,GAAG,EAAEZ,IAAI,CAACa,UAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CADD;AAeA,CA3CD;;AA8CAd,YAAY,CAACe,SAAb,GAAyB;AACxBd,EAAAA,IAAI,EAAEJ,SAAS,CAACmB,GADQ,CACH;;AADG,CAAzB;AAIA,eAAehB,YAAf","sourcesContent":["import React, { useState, useRef, useEffect, useContext } from 'react';\r\n// import { useStateValue } from '../components/StateProvider'\r\nimport PropTypes from 'prop-types';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\n\r\nconst ImageContent = (data) => {\r\n\tconst [width, setWidth] = useState(0);\r\n\tconst [cols, setCols] = useState(0)\r\n\tconst [currentWidth, setCurrentWidth] = useState(ref)\r\n\t// const [{ size }, dispatch] = useStateValue()\r\n\tconst ref = useRef(null);\r\n\tconsole.log(ref)\r\n\tuseEffect(() => {\r\n\t\tconst currentWidth = ref.current ? ref.current.offsetWidth : 0;\r\n\t\tsetWidth(currentWidth)\r\n\t\tif (currentWidth > 640) {\r\n\t\t\tsetCols(2)\r\n\t\t\t// dispatch({\r\n\t\t\t// \ttype: 'getCol',\r\n\t\t\t// \tcolSize: { newSize: cols }\r\n\t\t\t// })\r\n\t\t} else {\r\n\t\t\tsetCols(1)\r\n\t\t\t// dispatch({\r\n\t\t\t// \ttype: 'getCol',\r\n\t\t\t// \tcolSize: { newSize: cols }\r\n\t\t\t// })\r\n\t\t}\r\n\r\n\t}, [ref.current]);\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<span>{width}</span>\r\n\t\t\t<span>{cols}</span>\r\n\t\t\t<img\r\n\t\t\t\tref={ref}\r\n\t\t\t\tsrc={`${data.artistImage}` !== `null` ? `${data.artistImage}` : 'https://image-placeholder.com/images/actual-size/100x75.png'}\r\n\t\t\t\talt={data.artistName}\r\n\t\t\t/>\r\n\t\t</div>\r\n\r\n\t)\r\n\r\n\r\n\r\n}\r\n\r\n\r\nImageContent.propTypes = {\r\n\tdata: PropTypes.any, // eslint-disable-line\r\n};\r\n\r\nexport default ImageContent;"]},"metadata":{},"sourceType":"module"}