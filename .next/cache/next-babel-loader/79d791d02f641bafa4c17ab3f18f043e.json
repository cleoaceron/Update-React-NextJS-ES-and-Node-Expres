{"ast":null,"code":"var _jsxFileName = \"c:\\\\xampp\\\\htdocs\\\\test-site\\\\components\\\\ImageContent.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect, useContext } from 'react'; // import { useStateValue } from '../components/StateProvider'\n\nimport PropTypes from 'prop-types';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nvar ImageContent = function ImageContent(data) {\n  var _useState = useState(0),\n      width = _useState[0],\n      setWidth = _useState[1];\n\n  var _useState2 = useState(0),\n      cols = _useState2[0],\n      setCols = _useState2[1];\n\n  var _useState3 = useState(ref),\n      currentWidth = _useState3[0],\n      setCurrentWidth = _useState3[1]; // const [{ size }, dispatch] = useStateValue()\n\n\n  var ref = useRef(null);\n  console.log(ref);\n  useEffect(function () {\n    var currentWidth = ref.current ? ref.current.offsetWidth : 0;\n    setWidth(currentWidth);\n\n    if (currentWidth > 640) {\n      setCols(2); // dispatch({\n      // \ttype: 'getCol',\n      // \tcolSize: { newSize: cols }\n      // })\n    } else {\n      setCols(1); // dispatch({\n      // \ttype: 'getCol',\n      // \tcolSize: { newSize: cols }\n      // })\n    }\n  }, [ref.current]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, width), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, cols), __jsx(\"img\", {\n    ref: ref,\n    src: \"\".concat(data.artistImage) !== \"null\" ? \"\".concat(data.artistImage) : 'https://image-placeholder.com/images/actual-size/100x75.png',\n    alt: data.artistName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\n\nImageContent.propTypes = {\n  data: PropTypes.any // eslint-disable-line\n\n};\nexport default ImageContent;","map":{"version":3,"sources":["c:/xampp/htdocs/test-site/components/ImageContent.js"],"names":["React","useState","useRef","useEffect","useContext","PropTypes","GridList","GridListTile","ImageContent","data","width","setWidth","cols","setCols","ref","currentWidth","setCurrentWidth","console","log","current","offsetWidth","artistImage","artistName","propTypes","any"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,UAA7C,QAA+D,OAA/D,C,CACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAAA,kBACJR,QAAQ,CAAC,CAAD,CADJ;AAAA,MACvBS,KADuB;AAAA,MAChBC,QADgB;;AAAA,mBAENV,QAAQ,CAAC,CAAD,CAFF;AAAA,MAEvBW,IAFuB;AAAA,MAEjBC,OAFiB;;AAAA,mBAGUZ,QAAQ,CAACa,GAAD,CAHlB;AAAA,MAGvBC,YAHuB;AAAA,MAGTC,eAHS,kBAI9B;;;AACA,MAAMF,GAAG,GAAGZ,MAAM,CAAC,IAAD,CAAlB;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAX,EAAAA,SAAS,CAAC,YAAM;AACf,QAAMY,YAAY,GAAGD,GAAG,CAACK,OAAJ,GAAcL,GAAG,CAACK,OAAJ,CAAYC,WAA1B,GAAwC,CAA7D;AACAT,IAAAA,QAAQ,CAACI,YAAD,CAAR;;AACA,QAAIA,YAAY,GAAG,GAAnB,EAAwB;AACvBF,MAAAA,OAAO,CAAC,CAAD,CAAP,CADuB,CAEvB;AACA;AACA;AACA;AACA,KAND,MAMO;AACNA,MAAAA,OAAO,CAAC,CAAD,CAAP,CADM,CAEN;AACA;AACA;AACA;AACA;AAED,GAjBQ,EAiBN,CAACC,GAAG,CAACK,OAAL,CAjBM,CAAT;AAqBA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOT,KAAP,CADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOE,IAAP,CAFD,EAGC;AACC,IAAA,GAAG,EAAEE,GADN;AAEC,IAAA,GAAG,EAAE,UAAGL,IAAI,CAACY,WAAR,yBAAsCZ,IAAI,CAACY,WAA3C,IAA2D,6DAFjE;AAGC,IAAA,GAAG,EAAEZ,IAAI,CAACa,UAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CADD;AAeA,CA3CD;;AA8CAd,YAAY,CAACe,SAAb,GAAyB;AACxBd,EAAAA,IAAI,EAAEJ,SAAS,CAACmB,GADQ,CACH;;AADG,CAAzB;AAIA,eAAehB,YAAf","sourcesContent":["import React, { useState, useRef, useEffect, useContext } from 'react';\r\n// import { useStateValue } from '../components/StateProvider'\r\nimport PropTypes from 'prop-types';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\n\r\nconst ImageContent = (data) => {\r\n\tconst [width, setWidth] = useState(0);\r\n\tconst [cols, setCols] = useState(0)\r\n\tconst [currentWidth, setCurrentWidth] = useState(ref)\r\n\t// const [{ size }, dispatch] = useStateValue()\r\n\tconst ref = useRef(null);\r\n\tconsole.log(ref)\r\n\tuseEffect(() => {\r\n\t\tconst currentWidth = ref.current ? ref.current.offsetWidth : 0;\r\n\t\tsetWidth(currentWidth)\r\n\t\tif (currentWidth > 640) {\r\n\t\t\tsetCols(2)\r\n\t\t\t// dispatch({\r\n\t\t\t// \ttype: 'getCol',\r\n\t\t\t// \tcolSize: { newSize: cols }\r\n\t\t\t// })\r\n\t\t} else {\r\n\t\t\tsetCols(1)\r\n\t\t\t// dispatch({\r\n\t\t\t// \ttype: 'getCol',\r\n\t\t\t// \tcolSize: { newSize: cols }\r\n\t\t\t// })\r\n\t\t}\r\n\r\n\t}, [ref.current]);\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<span>{width}</span>\r\n\t\t\t<span>{cols}</span>\r\n\t\t\t<img\r\n\t\t\t\tref={ref}\r\n\t\t\t\tsrc={`${data.artistImage}` !== `null` ? `${data.artistImage}` : 'https://image-placeholder.com/images/actual-size/100x75.png'}\r\n\t\t\t\talt={data.artistName}\r\n\t\t\t/>\r\n\t\t</div>\r\n\r\n\t)\r\n\r\n\r\n\r\n}\r\n\r\n\r\nImageContent.propTypes = {\r\n\tdata: PropTypes.any, // eslint-disable-line\r\n};\r\n\r\nexport default ImageContent;"]},"metadata":{},"sourceType":"module"}