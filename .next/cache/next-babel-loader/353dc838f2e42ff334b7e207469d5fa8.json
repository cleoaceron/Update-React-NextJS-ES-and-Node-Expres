{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"c:\\\\xampp\\\\htdocs\\\\test-site\\\\components\\\\SearchInput.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { DataSearch } from '@appbaseio/reactivesearch';\n\nclass SearchInput extends Component {\n  // parseSuggestion = (suggestion) => ({\n  // \tdescription: suggestion.source.artistDescription,\n  // \tlabel: (\n  // \t\tthis.renderSuggestion(suggestion)\n  // \t),\n  // \tsource: suggestion.source\n  // })\n  // getValue = (suggestion) => {\n  // \treturn [suggestion.source.artistName, suggestion.source.name]\n  // }\n  // renderSuggestion = (suggestion) => {\n  // \tif (suggestion.source._type === 'artist') {\n  // \t\treturn <div>\n  // \t\t\t<img src={suggestion.source.artistImage} height=\"50\" width=\"60\" style={{ marginRight: 10 }} />\n  // \t\t\t{suggestion.source.artistName} in\n  // \t \t\t\t<span style={{ color: 'dodgerblue', marginLeft: 5 }}>\n  // \t\t\t\t{suggestion.source._type}\n  // \t\t\t</span>\n  // \t\t</div>\n  // \t}\n  // \treturn <div>\n  // \t\t<img src={suggestion.source.featurePicture.url} height=\"50\" width=\"60\" style={{ marginRight: 10 }} />\n  // \t\t{suggestion.source.name} {suggestion.source.name} in\n  // \t\t <span style={{ color: 'dodgerblue', marginLeft: 5 }}>\n  // \t\t\t{suggestion.source._type}\n  // \t\t</span>\n  // \t</div>\n  // }\n  render() {\n    return __jsx(\"div\", {\n      className: \"col-sm-20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(DataSearch, {\n      componentId: \"searchSensor\",\n      dataField: ['artistName', 'name'],\n      noInitialQuery: true,\n      placeholder: \"Search\" // react={{\n      // \tand: ['artistName', 'name']\n      // }}\n      // URLParams={true}\n      ,\n      URLParams: true,\n      autosuggest: true,\n      style: {\n        padding: '5px',\n        marginTop: '10px'\n      },\n      showIcon: false,\n      renderNoSuggestion: () => __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"No suggestions found\"),\n      onValueChange: value => {\n        if (value === '') {\n          this.setState({\n            searchText: null\n          });\n        }\n      },\n      onValueSelected: (value, cause, source) => {\n        this.setState({\n          searchText: value.value\n        });\n      } // customQuery={(value, props, suggestion, data) => {\n      // \treturn {\n      // \t\t\"query\": {\n      // \t\t\t\"match\": {\n      // \t\t\t\t\"message\": \"tring out Elasticsearch\"\n      // \t\t\t}\n      // \t\t},\n      // \t\t\"suggest\": {\n      // \t\t\t\"my-suggestion\": {\n      // \t\t\t\t\"text\": \"tring out Elasticsearch\",\n      // \t\t\t\t\"term\": {\n      // \t\t\t\t\t\"field\": \"message\"\n      // \t\t\t\t}\n      // \t\t\t}\n      // \t\t}\n      // \t}\n      // }}\n      // onValueChange={\n      // \tfunction (value, suggestion, props, data) {\n      // \t\tconsole.log(\"current value: \", value)\n      // \t\t// set the state\n      // \t\t// use the value with other js code\n      // \t}\n      // }\n      // parseSuggestion={this.parseSuggestion}\n      // value={this.state.value}\n      // parseSuggestion={(suggestion) => ({\n      // \tlabel: (\n      // \t\t<div>\n      // \t\t\t{suggestion.source.artistName} {suggestion.source.name} by\n      // \t\t\t<span style={{ color: 'dodgerblue', marginLeft: 5 }}>\n      // \t\t\t\t{suggestion.source._type}\n      // \t\t\t</span>\n      // \t\t</div>\n      // \t)\n      // })}\n      ,\n      render: ({\n        loading,\n        error,\n        data,\n        value,\n        downshiftProps: {\n          isOpen,\n          getItemProps\n        }\n      }) => {\n        if (loading) {\n          return __jsx(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, \"Fetching Suggestions.\");\n        }\n\n        if (error) {\n          return __jsx(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          }, \"Something went wrong! Error details \", _JSON$stringify(error));\n        }\n\n        return isOpen && Boolean(value.length) ? __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, data.slice(0, 10).map((suggestion, index) => __jsx(\"div\", _extends({\n          key: suggestion.value\n        }, getItemProps({\n          item: suggestion\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }), suggestion.value)), Boolean(value.length) && __jsx(\"div\", _extends({}, getItemProps({\n          item: {\n            label: value,\n            value: value\n          }\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }), \"Show all results for \\\"\", value, \"\\\"\")) : null;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SearchInput;","map":{"version":3,"sources":["c:/xampp/htdocs/test-site/components/SearchInput.js"],"names":["React","Component","DataSearch","SearchInput","render","padding","marginTop","value","setState","searchText","cause","source","loading","error","data","downshiftProps","isOpen","getItemProps","Boolean","length","slice","map","suggestion","index","item","label"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACCC,UADD,QAEO,2BAFP;;AAIA,MAAMC,WAAN,SAA0BF,SAA1B,CAAoC;AAInC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGAG,EAAAA,MAAM,GAAG;AACR,WACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,UAAD;AAEC,MAAA,WAAW,EAAC,cAFb;AAGC,MAAA,SAAS,EAAE,CAAC,YAAD,EAAe,MAAf,CAHZ;AAIC,MAAA,cAAc,EAAE,IAJjB;AAKC,MAAA,WAAW,EAAC,QALb,CAMC;AACA;AACA;AACA;AATD;AAUC,MAAA,SAAS,MAVV;AAWC,MAAA,WAAW,EAAE,IAXd;AAYC,MAAA,KAAK,EAAE;AACNC,QAAAA,OAAO,EAAE,KADH;AAENC,QAAAA,SAAS,EAAE;AAFL,OAZR;AAgBC,MAAA,QAAQ,EAAE,KAhBX;AAiBC,MAAA,kBAAkB,EAAE,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAlBF;AAsBC,MAAA,aAAa,EAAGC,KAAD,IAAW;AACzB,YAAIA,KAAK,KAAK,EAAd,EAAkB;AACjB,eAAKC,QAAL,CAAc;AAAEC,YAAAA,UAAU,EAAE;AAAd,WAAd;AACA;AAED,OA3BF;AA4BC,MAAA,eAAe,EAAE,CAACF,KAAD,EAAQG,KAAR,EAAeC,MAAf,KAA0B;AAC1C,aAAKH,QAAL,CAAc;AAAEC,UAAAA,UAAU,EAAEF,KAAK,CAACA;AAApB,SAAd;AACA,OA9BF,CAgCC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApED;AAqEC,MAAA,MAAM,EAAE,CAAC;AACRK,QAAAA,OADQ;AAERC,QAAAA,KAFQ;AAGRC,QAAAA,IAHQ;AAIRP,QAAAA,KAJQ;AAKRQ,QAAAA,cAAc,EAAE;AACfC,UAAAA,MADe;AAEfC,UAAAA;AAFe;AALR,OAAD,KASF;AACL,YAAIL,OAAJ,EAAa;AACZ,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACA;;AACD,YAAIC,KAAJ,EAAW;AACV,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACsC,gBAAeA,KAAf,CADtC,CADD;AAKA;;AACD,eAAQG,MAAM,IAAIE,OAAO,CAACX,KAAK,CAACY,MAAP,CAAlB,GACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACEL,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,EAAd,EAAkBC,GAAlB,CAAsB,CAACC,UAAD,EAAaC,KAAb,KACtB;AACC,UAAA,GAAG,EAAED,UAAU,CAACf;AADjB,WAEKU,YAAY,CAAC;AAAEO,UAAAA,IAAI,EAAEF;AAAR,SAAD,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAIEA,UAAU,CAACf,KAJb,CADA,CADF,EAUEW,OAAO,CAACX,KAAK,CAACY,MAAP,CAAP,IACA,0BAASF,YAAY,CAAC;AAAEO,UAAAA,IAAI,EAAE;AAAEC,YAAAA,KAAK,EAAElB,KAAT;AAAgBA,YAAAA,KAAK,EAAEA;AAAvB;AAAR,SAAD,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACwBA,KADxB,OAXF,CADM,GAkBH,IAlBJ;AAmBA,OA5GF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD;AAkHA;;AAxJkC;;AA2JpC,eAAeJ,WAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n\tDataSearch\r\n} from '@appbaseio/reactivesearch'\r\n\r\nclass SearchInput extends Component {\r\n\r\n\r\n\r\n\t// parseSuggestion = (suggestion) => ({\r\n\t// \tdescription: suggestion.source.artistDescription,\r\n\t// \tlabel: (\r\n\t// \t\tthis.renderSuggestion(suggestion)\r\n\t// \t),\r\n\t// \tsource: suggestion.source\r\n\t// })\r\n\r\n\t// getValue = (suggestion) => {\r\n\t// \treturn [suggestion.source.artistName, suggestion.source.name]\r\n\t// }\r\n\r\n\t// renderSuggestion = (suggestion) => {\r\n\t// \tif (suggestion.source._type === 'artist') {\r\n\t// \t\treturn <div>\r\n\t// \t\t\t<img src={suggestion.source.artistImage} height=\"50\" width=\"60\" style={{ marginRight: 10 }} />\r\n\t// \t\t\t{suggestion.source.artistName} in\r\n\t// \t \t\t\t<span style={{ color: 'dodgerblue', marginLeft: 5 }}>\r\n\t// \t\t\t\t{suggestion.source._type}\r\n\t// \t\t\t</span>\r\n\t// \t\t</div>\r\n\t// \t}\r\n\r\n\t// \treturn <div>\r\n\t// \t\t<img src={suggestion.source.featurePicture.url} height=\"50\" width=\"60\" style={{ marginRight: 10 }} />\r\n\t// \t\t{suggestion.source.name} {suggestion.source.name} in\r\n\t// \t\t <span style={{ color: 'dodgerblue', marginLeft: 5 }}>\r\n\t// \t\t\t{suggestion.source._type}\r\n\t// \t\t</span>\r\n\t// \t</div>\r\n\t// }\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='col-sm-20'>\r\n\t\t\t\t<DataSearch\r\n\r\n\t\t\t\t\tcomponentId=\"searchSensor\"\r\n\t\t\t\t\tdataField={['artistName', 'name']}\r\n\t\t\t\t\tnoInitialQuery={true}\r\n\t\t\t\t\tplaceholder=\"Search\"\r\n\t\t\t\t\t// react={{\r\n\t\t\t\t\t// \tand: ['artistName', 'name']\r\n\t\t\t\t\t// }}\r\n\t\t\t\t\t// URLParams={true}\r\n\t\t\t\t\tURLParams\r\n\t\t\t\t\tautosuggest={true}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tpadding: '5px',\r\n\t\t\t\t\t\tmarginTop: '10px'\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tshowIcon={false}\r\n\t\t\t\t\trenderNoSuggestion={() => (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\tNo suggestions found\r\n        \t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\tonValueChange={(value) => {\r\n\t\t\t\t\t\tif (value === '') {\r\n\t\t\t\t\t\t\tthis.setState({ searchText: null })\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonValueSelected={(value, cause, source) => {\r\n\t\t\t\t\t\tthis.setState({ searchText: value.value })\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// customQuery={(value, props, suggestion, data) => {\r\n\t\t\t\t\t// \treturn {\r\n\t\t\t\t\t// \t\t\"query\": {\r\n\t\t\t\t\t// \t\t\t\"match\": {\r\n\t\t\t\t\t// \t\t\t\t\"message\": \"tring out Elasticsearch\"\r\n\t\t\t\t\t// \t\t\t}\r\n\t\t\t\t\t// \t\t},\r\n\t\t\t\t\t// \t\t\"suggest\": {\r\n\t\t\t\t\t// \t\t\t\"my-suggestion\": {\r\n\t\t\t\t\t// \t\t\t\t\"text\": \"tring out Elasticsearch\",\r\n\t\t\t\t\t// \t\t\t\t\"term\": {\r\n\t\t\t\t\t// \t\t\t\t\t\"field\": \"message\"\r\n\t\t\t\t\t// \t\t\t\t}\r\n\t\t\t\t\t// \t\t\t}\r\n\t\t\t\t\t// \t\t}\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// }}\r\n\t\t\t\t\t// onValueChange={\r\n\t\t\t\t\t// \tfunction (value, suggestion, props, data) {\r\n\t\t\t\t\t// \t\tconsole.log(\"current value: \", value)\r\n\t\t\t\t\t// \t\t// set the state\r\n\t\t\t\t\t// \t\t// use the value with other js code\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// }\r\n\t\t\t\t\t// parseSuggestion={this.parseSuggestion}\r\n\t\t\t\t\t// value={this.state.value}\r\n\r\n\t\t\t\t\t// parseSuggestion={(suggestion) => ({\r\n\t\t\t\t\t// \tlabel: (\r\n\t\t\t\t\t// \t\t<div>\r\n\t\t\t\t\t// \t\t\t{suggestion.source.artistName} {suggestion.source.name} by\r\n\t\t\t\t\t// \t\t\t<span style={{ color: 'dodgerblue', marginLeft: 5 }}>\r\n\t\t\t\t\t// \t\t\t\t{suggestion.source._type}\r\n\t\t\t\t\t// \t\t\t</span>\r\n\t\t\t\t\t// \t\t</div>\r\n\t\t\t\t\t// \t)\r\n\t\t\t\t\t// })}\r\n\t\t\t\t\trender={({\r\n\t\t\t\t\t\tloading,\r\n\t\t\t\t\t\terror,\r\n\t\t\t\t\t\tdata,\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\tdownshiftProps: {\r\n\t\t\t\t\t\t\tisOpen,\r\n\t\t\t\t\t\t\tgetItemProps,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}) => {\r\n\t\t\t\t\t\tif (loading) {\r\n\t\t\t\t\t\t\treturn <div>Fetching Suggestions.</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\tSomething went wrong! Error details {JSON.stringify(error)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn (isOpen && Boolean(value.length)) ? (\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t{data.slice(0, 10).map((suggestion, index) => (\r\n\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\tkey={suggestion.value}\r\n\t\t\t\t\t\t\t\t\t\t{...getItemProps({ item: suggestion })}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{suggestion.value}\r\n\t\t\t\t\t\t\t\t\t\t{/* {console.log(suggestion.source)} */}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t{Boolean(value.length) && (\r\n\t\t\t\t\t\t\t\t\t<div {...getItemProps({ item: { label: value, value: value } })}>\r\n\t\t\t\t\t\t\t\t\t\tShow all results for \"{value}\"\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t{/* {console.log(data)} */}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t) : null\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SearchInput\r\n"]},"metadata":{},"sourceType":"module"}