{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nvar _jsxFileName = \"c:\\\\xampp\\\\htdocs\\\\test-site\\\\components\\\\Newimage.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport ImageContent from './ImageContent';\n\nconst Newimage = data => {\n  const {\n    0: width,\n    1: setWidth\n  } = useState(0);\n  const {\n    0: cols,\n    1: setCols\n  } = useState(0);\n\n  let items = _Object$values(data); // let test = items.map(item => {\n  // \tconsole.log(item)\n  // })\n  // let datas = items.map(item => {\n  // \tconst { artistName, artistImage } = item\n  // \treturn artistImage\n  // })\n  // console.log(datas)\n  // console.log(ref)\n\n\n  const ref = useRef(null); // console.log(ref)\n\n  useEffect(() => {\n    console.log(ref.current); // ref.current.offsetWidth\n    // const currentWidth = ref.current ? ref.current.offsetWidth : 0;\n    // setWidth(currentWidth)\n    // if (currentWidth > 640) {\n    // \tsetCols(2)\n    // } else {\n    // \tsetCols(1)\n    // }\n  }, [ref]); // console.log(cols)\n  // let items = Object.keys(data).map((key, index) => {\n  // \treturn data[key]\n  // })\t\n\n  return __jsx(\"div\", {\n    className: \"image-result__body--container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(GridList, {\n    cellHeight: 160,\n    cols: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, items.map(item => item._type === 'artist' ? __jsx(GridListTile, {\n    key: item.img,\n    style: {\n      border: '1px solid red'\n    },\n    cols: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, width, \" - \"), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, cols), __jsx(\"img\", {\n    ref: ref,\n    src: `${item.artistImage}` !== `null` ? `${item.artistImage}` : 'https://image-placeholder.com/images/actual-size/100x75.png',\n    alt: item.artistName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })) : null)));\n};\n\nNewimage.propTypes = {\n  data: PropTypes.any // eslint-disable-line\n\n};\nexport default Newimage;","map":{"version":3,"sources":["c:/xampp/htdocs/test-site/components/Newimage.js"],"names":["React","useState","useRef","useEffect","axios","PropTypes","GridList","GridListTile","ImageContent","Newimage","data","width","setWidth","cols","setCols","items","ref","console","log","current","map","item","_type","img","border","artistImage","artistName","propTypes","any"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,QAAQ,GAAIC,IAAD,IAAU;AAC1B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBX,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACY,IAAD;AAAA,OAAOC;AAAP,MAAkBb,QAAQ,CAAC,CAAD,CAAhC;;AAEA,MAAIc,KAAK,GAAG,eAAcL,IAAd,CAAZ,CAJ0B,CAK1B;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;;;AAEA,QAAMM,GAAG,GAAGd,MAAM,CAAC,IAAD,CAAlB,CApB0B,CAsB1B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACfc,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,EADe,CAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAXQ,EAWN,CAACH,GAAD,CAXM,CAAT,CAvB0B,CAmC1B;AAEA;AACA;AACA;;AAIA,SACC;AAAK,IAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEC,MAAC,QAAD;AAAU,IAAA,UAAU,EAAE,GAAtB;AAA2B,IAAA,IAAI,EAAE,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACED,KAAK,CAACK,GAAN,CAAUC,IAAI,IACdA,IAAI,CAACC,KAAL,KAAe,QAAf,GACC,MAAC,YAAD;AAAc,IAAA,GAAG,EAAED,IAAI,CAACE,GAAxB;AAA6B,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAApC;AAAiE,IAAA,IAAI,EAAE,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOb,KAAP,QADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOE,IAAP,CAFD,EAGC;AACC,IAAA,GAAG,EAAEG,GADN;AAEC,IAAA,GAAG,EAAG,GAAEK,IAAI,CAACI,WAAY,EAApB,KAA2B,MAA3B,GAAoC,GAAEJ,IAAI,CAACI,WAAY,EAAvD,GAA2D,6DAFjE;AAGC,IAAA,GAAG,EAAEJ,IAAI,CAACK,UAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CADD,GAUG,IAXH,CADF,CAFD,CADD;AAuBA,CAlED;;AAqEAjB,QAAQ,CAACkB,SAAT,GAAqB;AACpBjB,EAAAA,IAAI,EAAEL,SAAS,CAACuB,GADI,CACC;;AADD,CAArB;AAIA,eAAenB,QAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport ImageContent from './ImageContent'\r\n\r\nconst Newimage = (data) => {\r\n\tconst [width, setWidth] = useState(0);\r\n\tconst [cols, setCols] = useState(0);\r\n\r\n\tlet items = Object.values(data)\r\n\t// let test = items.map(item => {\r\n\t// \tconsole.log(item)\r\n\t// })\r\n\r\n\r\n\r\n\t// let datas = items.map(item => {\r\n\t// \tconst { artistName, artistImage } = item\r\n\t// \treturn artistImage\r\n\t// })\r\n\t// console.log(datas)\r\n\r\n\r\n\t// console.log(ref)\r\n\r\n\tconst ref = useRef(null);\r\n\r\n\t// console.log(ref)\r\n\tuseEffect(() => {\r\n\t\tconsole.log(ref.current)\r\n\t\t// ref.current.offsetWidth\r\n\t\t// const currentWidth = ref.current ? ref.current.offsetWidth : 0;\r\n\t\t// setWidth(currentWidth)\r\n\t\t// if (currentWidth > 640) {\r\n\t\t// \tsetCols(2)\r\n\t\t// } else {\r\n\t\t// \tsetCols(1)\r\n\t\t// }\r\n\r\n\t}, [ref]);\r\n\t// console.log(cols)\r\n\r\n\t// let items = Object.keys(data).map((key, index) => {\r\n\t// \treturn data[key]\r\n\t// })\t\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className='image-result__body--container'>\r\n\r\n\t\t\t<GridList cellHeight={160} cols={6}>\r\n\t\t\t\t{items.map(item =>\r\n\t\t\t\t\titem._type === 'artist' ?\r\n\t\t\t\t\t\t<GridListTile key={item.img} style={{ border: '1px solid red' }} cols={1}>\r\n\t\t\t\t\t\t\t<span>{width} - </span>\r\n\t\t\t\t\t\t\t<span>{cols}</span>\r\n\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\tref={ref}\r\n\t\t\t\t\t\t\t\tsrc={`${item.artistImage}` !== `null` ? `${item.artistImage}` : 'https://image-placeholder.com/images/actual-size/100x75.png'}\r\n\t\t\t\t\t\t\t\talt={item.artistName}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</GridListTile>\r\n\t\t\t\t\t\t: null\r\n\t\t\t\t)}\r\n\t\t\t</GridList>\r\n\t\t</div>\r\n\t)\r\n\r\n\r\n\r\n}\r\n\r\n\r\nNewimage.propTypes = {\r\n\tdata: PropTypes.any, // eslint-disable-line\r\n};\r\n\r\nexport default Newimage;"]},"metadata":{},"sourceType":"module"}